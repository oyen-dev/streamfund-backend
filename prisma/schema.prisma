// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnalyticType {
  DAILY
  WEEKLY
  MONTHLY
}

model Bio {
  id          String   @id @default(cuid())
  username    String   @unique
  bio         String?
  image       String?
  x           String?
  tiktok      String?
  instagram   String?
  youtube     String?
  website     String?
  streamer    Streamer @relation(fields: [streamer_id], references: [id])
  streamer_id String   @unique
  viewer      Viewer   @relation(fields: [viewer_id], references: [id])
  viewer_id   String   @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Configuration {
  id          String   @id @default(cuid())
  alert       Json?
  mediashare  Json?
  qr_code     Json?
  marquee     Json?
  subhaton    Json?
  voting      Json?
  milestone   Json?
  live_ads    Json?
  streamer    Streamer @relation(fields: [streamer_id], references: [id])
  streamer_id String   @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Chain {
  id                 String         @id @default(cuid())
  name               String
  chain_id           Int
  block_explorer_url String
  image              String
  token              Token[]
  collector          FeeCollector[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Token {
  id                        String                   @id @default(cuid())
  address                   String
  decimal                   Int
  name                      String
  symbol                    String
  image                     String
  coin_gecko_id             String
  chain                     Chain                    @relation(fields: [chain_id], references: [id])
  chain_id                  String
  support                   Support[]
  analytics_most_used_token AnalyticsMostUsedToken[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Viewer {
  id                        String                    @id @default(cuid())
  address                   String                    @unique
  usd_total_support         Float
  bio                       Bio?
  support                   Support[]
  top_support               TopSupport[]
  top_supporter             TopSupporter[]
  analytics_generous_viewer AnalyticsGenerousViewer[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Streamer {
  id                               String                          @id @default(cuid())
  address                          String                          @unique
  stream_key                       String?
  usd_total_support                Float
  configuration                    Configuration?
  bio                              Bio?
  support                          Support[]
  top_support                      TopSupport[]
  top_supporter                    TopSupporter[]
  analytics_streamer_fee_collector AnalyticsStreamerFeeCollector[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Support {
  id               String       @id @default(cuid())
  hash             String
  usd_amount       Float
  token_amount     BigInt
  data             String
  token            Token        @relation(fields: [token_id], references: [id])
  token_id         String
  from             Viewer       @relation(fields: [from_id], references: [id])
  from_id          String
  to               Streamer     @relation(fields: [to_id], references: [id])
  to_id            String
  fee_collector    FeeCollector @relation(fields: [fee_collector_id], references: [id])
  fee_collector_id String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model TopSupport {
  id          String   @id @default(cuid())
  value       Float
  count       Int
  streamer    Streamer @relation(fields: [streamer_id], references: [id])
  streamer_id String
  viewer      Viewer   @relation(fields: [viewer_id], references: [id])
  viewer_id   String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model TopSupporter {
  id          String   @id @default(cuid())
  value       Float
  count       Int
  streamer    Streamer @relation(fields: [streamer_id], references: [id])
  streamer_id String
  viewer      Viewer   @relation(fields: [viewer_id], references: [id])
  viewer_id   String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model FeeCollector {
  id           String    @id @default(cuid())
  address      String
  chain        Chain     @relation(fields: [chain_id], references: [id])
  chain_id     String
  usd_total    Float
  transactions Support[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model AnalyticsStreamerFeeCollector {
  id          String       @id @default(cuid())
  type        AnalyticType
  usd_amount  Float
  streamer    Streamer     @relation(fields: [streamer_id], references: [id])
  streamer_id String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model AnalyticsGenerousViewer {
  id         String       @id @default(cuid())
  type       AnalyticType
  usd_amount Float
  viewer     Viewer       @relation(fields: [viewer_id], references: [id])
  viewer_id  String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model AnalyticsMostUsedToken {
  id          String       @id @default(cuid())
  type        AnalyticType
  used_count  Int
  used_amount Float
  token       Token        @relation(fields: [token_id], references: [id])
  token_id    String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}
